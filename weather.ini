[SETTINGS]

# Default device I2C address
BME280_ADDRESS = 0x76
# Set the altitude of your current location in meters
BME280_ALTITUDE = 287


LCD_ADDRESS = 0x27
ADS1115_ADDRESS = 0x48
ADS1115 = 1
# Select the gain
# +/- 6.144 V
ADS1115_GAIN = 6144
# +/- 4.096 V
#ADS1115_GAIN = 4096  

# Select the sample rate
# 250 samples per second
ADS1115_SPS = 250  

# 5V
REFERENTIAL_VOLTAGE=5000 

# define minimal and maximal rps
MIN_RPS = 1
MAX_RPS = 45

# 10 minutes = 60*10 = 600
WIND_HISTORY_INTERVAL =  600
LOG_FILE = /var/log/weatherd.log

# speed and rpm obtained by anemometer calibration using car and GPS
# using gpsSpeedLogger script
# https://docs.google.com/spreadsheets/d/1KGnTVhRWrb_K1fnTTW8CXkVz8K4AGxHHnDNjzvDxhsM/edit?usp=sharing
# equation to calculate rotation per second (rps) from wind speed (GPS car speed)
# f(x)= 0.808x + 0.058
# + 0.058 can be omited        
# wind speed from rotation: # f(x) = 1/0.808x => f(x) = 1.2376x
PULSES_TO_MPS_QUOTIENT=1.2376

# wind sensors (anemo and vane) are used for weatherstations: 
# WH1080 WH1090 WS0101 WH2080 and many more
# while 1 magnet on the anemometer is rotating, it is passing over 2 ends
# of reed switch, this is causing the reed switch "closed state" and "open state". 
# "closed state" is significantly shorter (1/3 of the time) comparing to the 
# "open state" (2/3 of the time) |_|¯¯¯|_|¯¯¯|
# such a behviour can be accepted for relativelry slow rotation 
# of an anemometer(0 - 40 rps)
# Provided Python code is detecting both, rising and falling edge 
# => 4 pulses per revolution (two falling and two rising edges)
PULSES_PER_REVOLUTION = 4    

# ALL GPIO are identified by their Broadcom number
# contact of an anemometer reed switch are located on 2 inner contacts of
# the RJ11 connector and connected to
PIN_ANEMO_PULSES_INPUT = 22

# pwm pulses are used to trigger calback function to measure/calculate rps
# sampling frequency in Hz (1 Hz means rps is calculated 1 time per second)
# pins PIN_SAMPLING_PULSES_OUTPUT and PIN_RPS_SAMPLER_INPUT are wired together
# Start hardware PWM on a PIN_SAMPLING_PULSES_OUTPUT GPIO (dutycycle 50% is set in the code)
PIN_SAMPLING_PULSES_OUTPUT = 18 
PIN_RPS_SAMPLER_INPUT = 23
SAMPLING_FREQUENCY = 1 

[WINDFINDER]
WINDFINDER_URI = http://www.windfinder.com/wind-cgi/httpload.pl
WINDFINDER_ID = phan-rang-kite-center_my-hoa
WINDFINDER_PASS = f47d4b810c1cc74b

[WINDGURU]
WINDGURU_URI = http://www.windguru.cz/upload/api.php
WINDGURU_STATION_ID = foersterova449
WINDGURU_API_PASSWORD = atapol**7
WINDGURU_SPOT_NAME = Foersterova 449    
# measurement interval in seconds (60 would mean you are sending 1 minute measurements),
# then the wind_avg / wind_max / wind_min values should be values valid for this past interval
INTERVAL = 60

[WEATHERUNDERGROUND]
WEATHERUNDERGROUND_URI = http://rtupdate.wunderground.com/weatherstation/updateweatherstation.php
# Station ID
WEATHERUNDERGROUND_ID = IJIN41
# Station Key/Password
WEATHERUNDERGROUND_KEY = 17kzwbjg

